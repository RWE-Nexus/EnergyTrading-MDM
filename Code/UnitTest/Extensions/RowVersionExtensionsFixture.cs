namespace EnergyTrading.Mdm.Test.Extensions
{
    using System;

    using EnergyTrading.Mdm.Extensions;

    using NUnit.Framework;

    [TestFixture]
    public class RowVersionExtensionsFixture
    {
        [Test]
        [ExpectedException(typeof(ArgumentOutOfRangeException))]
        public void ThrowsIfWrongLength()
        {
            new byte[6].ToUnsignedLongVersion();
        }

        [Test]
        public void RunToUnsignedLongVersionTests()
        {
            this.TestToUnsignedLongVersion(new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, 0);
            this.TestToUnsignedLongVersion(new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }, 1);
            this.TestToUnsignedLongVersion(new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF }, 255);
            this.TestToUnsignedLongVersion(new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00 }, 256);
            this.TestToUnsignedLongVersion(new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01 }, 257);
            this.TestToUnsignedLongVersion(new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00 }, 512);
            this.TestToUnsignedLongVersion(new byte[] { 0xB9, 0xFC, 0x15, 0x70, 0x6F, 0x2A, 0x01, 0x00 }, 0xB9FC15706F2A0100);
        }

        private void TestToUnsignedLongVersion(byte[] input, ulong expected)
        {
            var candidate = input.ToUnsignedLongVersion();
            Assert.AreEqual(expected, candidate);
        }

        [Test]
        public void UnsignedLongVersionComparisonTests()
        {
            Assert.IsTrue(new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }.ToUnsignedLongVersion() > new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }.ToUnsignedLongVersion());
            Assert.IsTrue(new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01 }.ToUnsignedLongVersion() > new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }.ToUnsignedLongVersion());
            Assert.IsTrue(new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00 }.ToUnsignedLongVersion() > new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x01 }.ToUnsignedLongVersion());
            Assert.IsTrue(new byte[] { 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00 }.ToUnsignedLongVersion() > new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x01 }.ToUnsignedLongVersion());
            Assert.IsTrue(new byte[] { 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00 }.ToUnsignedLongVersion() > new byte[] { 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x01 }.ToUnsignedLongVersion());
            Assert.IsTrue(new byte[] { 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00 }.ToUnsignedLongVersion() > new byte[] { 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x01 }.ToUnsignedLongVersion());
            Assert.IsTrue(new byte[] { 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00 }.ToUnsignedLongVersion() > new byte[] { 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x01 }.ToUnsignedLongVersion());
            Assert.IsTrue(new byte[] { 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00 }.ToUnsignedLongVersion() > new byte[] { 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x01 }.ToUnsignedLongVersion());
            Assert.IsTrue(new byte[] { 0xFF, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00 }.ToUnsignedLongVersion() > new byte[] { 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x01 }.ToUnsignedLongVersion());
            Assert.IsTrue(new byte[] { 0xFF, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00 }.ToUnsignedLongVersion() > new byte[] { 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x01 }.ToUnsignedLongVersion());
        }
    }
}